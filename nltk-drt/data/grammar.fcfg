## Natural Language Toolkit: tenseaspect.fcfg
## 
## Author: Peter Makarov <peter.makarov.russia@gmail.com> 

% start IP
#############################
# Grammar Rules:
#############################

# Verbal Rules:
###############

IP[SEM=<?ibar(?subj)>] -> NP[NUM=?n,SEM=?subj] Ibar[NUM=?n,SEM=?ibar]

Ibar[NUM=?n,SEM=<?i(?vp)>] -> I[NUM=?n,PERF=?p,SEM=?i] VP[PERF=?p,SEM=?vp]

I[NUM=?n,SEM=<?neg(?i)>] -> I[NUM=?n,SEM=?i] Neg[SEM=?neg]

VP[PERF=?p,SEM=?v] -> V[SUBCAT=iv,PERF=?p,SEM=?v]

VP[PERF=?p,SEM=<?v(?obj)>] -> V[SUBCAT=tv,PERF=?p,SEM=?v] NP[SEM=?obj]

RC[NUM=?n,SEM=<?rpro(?ibar)>] -> Rpro[SEM=?rpro] Ibar[NUM=?n,SEM=?ibar]

# Nominal Rules:
################

NP[NUM=?n,SEM=<?det(?nom)>] -> Det[NUM=?n,SEM=?det]  Nbar[NUM=?n,SEM=?nom]

Nbar[NUM=?n,SEM=<?adj(?nom)>] -> ADJ[SEM=?adj] N[NUM=?n,SEM=?nom]

Nbar[NUM=?n,SEM=<?rc(?nom)>] -> N[NUM=?n,SEM=?nom] RC[NUM=?n,SEM=?rc]

Nbar[NUM=?n,SEM=<?nom>] -> N[NUM=?n,SEM=?nom]

N[NUM=?n,SEM=<?pp(?nom)>] -> N[NUM=?n,SEM=?nom] PP[SEM=?pp]

Det[SEM=<?p(?np)>] -> NP[SEM=?np] PosMarker[SEM=?p]

PP[SEM=<?p(?np)>] -> P[SEM=?p] NP[SEM=?np]

# Predeterminer
Det[SEM=<?not(?det)>] -> Not[SEM=?not] Det[SEM=?det]

# Complex sentences:
####################

IP[SEM = <?conj(?s1,?s2)>] -> IP[SEM=?s1] CONJ[SEM=?conj] IP[SEM=?s2]

IP[SEM=<?if(?s1,?s2)>] -> IF[SEM=?if] IP[SEM=?s1] IP[SEM=?s2]

CONJ[SEM=?or] -> OR[SEM=?or]

CONJ[SEM=?and] -> AND[SEM=?and]


#############################
# Lexicalisation Rules:
#############################

# Nominals
##########

N[NUM=?n,GEN=?g,SEM=<\x.DRS([],[?lexn{?n,?g}(x)])>] -> LexN[NUM=?n,GEN=?g,SEM=?lexn]

NP[NUM=?n,GEN=?g,SEM=<\P.(DRS([],[PRON([x],[?lexp{?n,?g}(x)])])+P(x))>] -> LexPro[NUM=?n,GEN=?g,SEM=?lexp]

NP[NUM=?n,GEN=?g,SEM=<\P.(DRS([],[PROP([x],[?lexn{?n,?g}(x)])])+P(x))>] -> LexPropN[NUM=?n,GEN=?g,SEM=?lexn]

ADJ[SEM=<\P x.(DRS([],[?ladj(x)])+P(x))>] -> LexADJ[SEM=?ladj]

Det[SEM=<\P Q.(DRS([],[(DEF([x],[POSS(y,x), PRON([y],[?lexp{?n,?g}(y)])])+P(x))])+Q(x))>] -> LexPos[NUM=?n,GEN=?g,SEM=?lexp]

# Bare infinitives: Intransitive Events / States
################################################

V[SUBCAT=iv,-PERF,SEM=<\x.DRS([e,t],[?lv(e),AGENT(e,x),LOCPRO(t)])>] -> LexV[SUBCAT=iv,TYPE=e,SEM=?lv,-PERF]

V[SUBCAT=iv,-PERF,SEM=<\x.DRS([s,t],[?lv(s),AGENT(s,x),LOCPRO(t)])>] -> LexV[SUBCAT=iv,TYPE=s,SEM=?lv,-PERF]

V[SUBCAT=iv,+PERF,SEM=<\x.DRS([e],[?lv(e),AGENT(e,x),PERF(e)])>] -> LexV[SUBCAT=iv,TYPE=e,SEM=?lv,+PERF]

# Bare infinitives: Transitive Events / States
##############################################

V[SUBCAT=tv,-PERF,SEM=<\X x.X(\y.DRS([e,t],[?lv(e),AGENT(e,x),PATIENT(e,y),LOCPRO(t)]))>] -> LexV[SUBCAT=tv,TYPE=e,SEM=?lv,-PERF]

V[SUBCAT=tv,-PERF,SEM=<\X x.X(\y.DRS([s,t],[?lv(s),AGENT(s,x),PATIENT(s,y),LOCPRO(t)]))>] -> LexV[SUBCAT=tv,TYPE=s,SEM=?lv,-PERF]

V[SUBCAT=tv,+PERF,SEM=<\X x.X(\y.DRS([e],[?lv(e),AGENT(e,x),PATIENT(e,y),PERF(e)]))>] -> LexV[SUBCAT=tv,TYPE=e,SEM=?lv,+PERF]

V[SUBCAT=tv,+PERF,SEM=<\X x.X(\y.DRS([s],[?lv(s),AGENT(s,x),PATIENT(s,y),PERF(s)]))>] -> LexV[SUBCAT=tv,TYPE=s,SEM=?lv,+PERF]


#############################
# Lexicon
#############################

# Proper Names:
###############

LexPropN[NUM=sg,GEN=m,SEM=<Angus>] -> 'Angus'
LexPropN[NUM=sg,GEN=m,SEM=<John>] -> 'John'
LexPropN[NUM=sg,GEN=f,SEM=<Mary>] -> 'Mary'
LexPropN[NUM=sg,GEN=m,SEM=<Vincent>] -> 'Vincent'
LexPropN[NUM=sg,GEN=f,SEM=<Mia>] -> 'Mia'

# Personal and Reflexive Pronouns:
##################################

LexPro[NUM=sg,GEN=m,SEM=<PRO>] -> 'he' | 'He'
LexPro[NUM=sg,GEN=f,SEM=<PRO>] -> 'she' | 'She'
LexPro[NUM=sg,GEN=n,SEM=<PRO>] -> 'it' | 'It'

LexPro[NUM=sg,GEN=m,SEM=<RPRO>] -> 'himself'
LexPro[NUM=sg,GEN=f,SEM=<RPRO>] -> 'herself'
LexPro[NUM=sg,GEN=n,SEM=<RPRO>] -> 'itself'

LexPos[NUM=sg,GEN=m,SEM=<PPRO>] -> 'his' | 'His'
LexPos[NUM=sg,GEN=f,SEM=<PPRO>] -> 'her' | 'Her'
LexPos[NUM=sg,GEN=n,SEM=<PPRO>] -> 'its' | 'Its'

# Determiners:
##############

Det[NUM=sg,SEM=<\P Q.DRS([],[((DRS([x],[])+P(x)) implies Q(x))])>] -> 'every' | 'Every' 
Det[NUM=pl,SEM=<\P Q.DRS([],[((DRS([x],[])+P(x)) implies Q(x))])>] -> 'all' | 'All'
Det[SEM=<\P Q.((DRS([x],[])+P(x))+Q(x))>] -> 'some' | 'Some'
Det[NUM=sg,SEM=<\P Q.((DRS([x],[])+P(x))+Q(x))>] -> 'a' | 'A'
Det[NUM=sg,SEM=<\P Q.(DRS([], [not ((DRS([x],[])+P(x))+Q(x))]))>] -> 'no' | 'No'
# Pre-Determiner:
Not[SEM=<\ Q P Z.(DRS([],[-Q(P,Z)]))>] -> 'not' | 'Not'

# Presuppositional Determiners and Markers:
###########################################

Det[SEM=<\P Q.(DRS([],[(DEF([x],[])+P(x))])+Q(x))>] -> 'the' | 'The'

PosMarker[SEM=<\O P Q.(DRS([],[(O(\x.(DEF([y],[POSS(x,y)])))+P(y))])+Q(y))>] -> 's'


# Relative Pronoun: (substitutes for SubjNP of the relative clause)
###################

Rpro[SEM=<\P Q x.(P(\D.D(x))+Q(x))>] -> 'that'

# Adjectives:
#############

LexADJ[SEM=<red>] -> 'blue'

# Common Nouns:
###############

LexN[NUM=sg,GEN=m,SEM=<boy>] -> 'boy'
LexN[NUM=pl,GEN=m,SEM=<boy>] -> 'boys'
LexN[NUM=sg,GEN=f,SEM=<girl>] -> 'girl'
LexN[NUM=pl,GEN=f,SEM=<girl>] -> 'girls'
LexN[NUM=sg,GEN=n,SEM=<dog>] -> 'dog'
LexN[NUM=pl,GEN=n,SEM=<dog>] -> 'dogs'
LexN[NUM=sg,GEN=m,SEM=<student>] -> 'student'
LexN[NUM=pl,GEN=m,SEM=<student>] -> 'students'
LexN[NUM=sg,GEN=n,SEM=<garden>] -> 'garden'
LexN[NUM=sg,GEN=n,SEM=<kitchen>] -> 'kitchen'
LexN[NUM=sg,GEN=n,SEM=<car>] -> 'car'
LexN[NUM=sg,GEN=n,SEM=<morning>] -> 'morning'
LexN[NUM=sg,GEN=n,SEM=<letter>] -> 'letter'


# Prepositions:
###############

P[SEM=<\Q P z.(Q(\y.DRS([],[REL(z,y)]))+P(z))>] -> 'of'

# Connectives:
##############

OR[SEM=<\X Y.DRS([],[(X or Y)])>] -> 'or'

IF[SEM=<\X Y.DRS([],[(X implies Y)])>] -> 'if' | 'If'

AND[SEM=<\X Y.(X+Y)>] -> 'and'

###############################
###############################

# Auxiliary Verbs and Negation:
###############################

I[NUM=sg,-PERF,SEM=<\X Y.(DRS([t],[PRES(t)])+Y(X))>] -> 'does'
I[-PERF,SEM=<\X Y.(DRS([t],[FUT(t)])+Y(X))>] -> 'will'
I[-PERF,SEM=<\X Y.(DRS([t],[PAST(t)])+Y(X))>] -> 'did'
I[NUM=sg,+PERF,SEM=<\X Y.(DRS([t,s],[PRES(t),include(s,t)])+Y(X))>] -> 'has'
I[+PERF,SEM=<\X Y.(DRS([t,s],[PAST(t),overlap(s,t)])+Y(X))>] -> 'had'
Neg[SEM=<\Q P.Q(\x.DRS([],[-P(x)]))>] -> 'not'

# Bare infinitives:
###################

# Intransitives:
#################

LexV[SUBCAT=iv,TYPE=e,SEM=<die>,-PERF] -> 'die'
LexV[SUBCAT=iv,TYPE=e,SEM=<walk>,-PERF] -> 'walk'
LexV[SUBCAT=iv,TYPE=e,SEM=<dance>,-PERF] -> 'dance'

LexV[SUBCAT=iv,TYPE=e,SEM=<die>,+PERF] -> 'died'

LexV[SUBCAT=iv,TYPE=s,SEM=<live>] -> 'live'

# Transitives:
###############

LexV[SUBCAT=tv,TYPE=e,SEM=<kiss>,-PERF] -> 'kiss'
LexV[SUBCAT=tv,TYPE=e,SEM=<write>,-PERF] -> 'write'
LexV[SUBCAT=tv,TYPE=e,SEM=<bite>,-PERF] -> 'bite'

LexV[SUBCAT=tv,TYPE=e,SEM=<write>,+PERF] -> 'written'

LexV[SUBCAT=tv,TYPE=s,SEM=<own>,-PERF] -> 'own'

LexV[SUBCAT=tv,TYPE=s,SEM=<own>,+PERF] -> 'owned'

# Ditransitives:
#################

# Copula:
##########

#V[SUBCAT=tv,+FIN,NUM=sg,SEM=<\X Y.(DRS([t],[PRES(t)])+Y(\x.(X(\y.DRS([s],[eq(s,x,y)])))))>] -> 'is'