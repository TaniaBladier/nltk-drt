## Natural Language Toolkit: drt.fcfg
## 
## Author: Dan Garrette <dhgarrette@gmail.com> 
## URL: <http://www.nltk.orgt>
## For license information, see LICENSE.TXT

% start IP
############################
# Grammar Rules
#############################

IP[SEM = <?ibar(?subj)>] -> NP[NUM=?n,SEM=?subj] Ibar[NUM=?n,SEM=?ibar]

Ibar[NUM=?n,SEM=<?vp>] -> VP[+FIN,SEM=?vp]

Ibar[NUM=?n,SEM=<?i(?vp)>] -> I[NUM=?n,SEM=?i] VP[-FIN,SEM=?vp]

I[NUM=?n,SEM=<?neg(?i)>] -> I[NUM=?n,SEM=?i] Neg[SEM=?neg] 

NP[NUM=?n,SEM=<app(?det,?nom)>] -> Det[NUM=?n,SEM=?det]  Nom[NUM=?n,SEM=?nom]
NP[LOC=?l,NUM=?n,SEM=?np] -> PropN[LOC=?l,NUM=?n,SEM=?np]

# Added N-bar level with adjectives and relative clauses

NP[NUM=?n,SEM=<app(?det,?nbar)>] -> Det[NUM=?n,SEM=?det] NBAR[NUM=?n,SEM=?nbar]

NBAR[NUM=?n,SEM=<app(?adj,?nom)>] -> ADJ[SEM=?adj] Nom[NUM=?n,SEM=?nom]

NBAR[NUM=?n,SEM=<app(?rc,?nom)>] -> Nom[NUM=?n,SEM=?nom] RC[SEM=?rc]

RC[SEM=<app(?rpro,?vp)>] -> Rpro[SEM=?rpro] VP[SEM=?vp]

Nom[NUM=?n,SEM=?nom] -> N[NUM=?n,SEM=?nom]
Nom[NUM=?n,SEM=<app(?pp,?nom)>] -> N[NUM=?n,SEM=?nom] PP[SEM=?pp]

VP[NUM=?n,FIN=?fin,SEM=?v] -> V[SUBCAT=iv,FIN=?fin,NUM=?n,SEM=?v]
VP[NUM=?n,FIN=?fin,SEM=<app(?v,?obj)>] -> V[SUBCAT=tv,FIN=?fin,NUM=?n,SEM=?v] NP[SEM=?obj]

#############################
# Lexical Rules
#############################

# Proper Names:

PropN[NUM=sg,SEM=<\P.(DRS([x],[Angus(x)])+P(x))>] -> 'Angus'
PropN[NUM=sg,SEM=<\P.(DRS([x],[John(x)])+P(x))>] -> 'John'
PropN[NUM=sg,SEM=<\P.(DRS([x],[Mary(x)])+P(x))>] -> 'Mary'
PropN[NUM=sg,SEM=<\P.(DRS([x],[Vincent(x)])+P(x))>] -> 'Vincent'
PropN[NUM=sg,SEM=<\P.(DRS([x],[Mia(x)])+P(x))>] -> 'Mia'

# Personal Pronouns:

PropN[NUM=sg,SEM=<\P.(DRS([x],[PRO(x)])+P(x))>] -> 'he' | 'He'
PropN[NUM=sg,SEM=<\P.(DRS([x],[PRO(x)])+P(x))>] -> 'she' | 'She'
PropN[NUM=sg,SEM=<\P.(DRS([x],[PRO(x)])+P(x))>] -> 'it' | 'it'

# Determiners:

Det[NUM=sg,SEM=<\P Q.DRS([],[((DRS([x],[])+P(x)) implies Q(x))])>] -> 'every' | 'Every' 
Det[NUM=pl,SEM=<\P Q.DRS([],[((DRS([x],[])+P(x)) implies Q(x))])>] -> 'all' | 'All'

Det[SEM=<\P Q.((DRS([x],[])+P(x))+Q(x))>] -> 'some' | 'Some'
Det[NUM=sg,SEM=<\P Q.((DRS([x],[])+P(x))+Q(x))>] -> 'a' | 'A'

Det[NUM=sg,SEM=<\P Q.(DRS([], [not ((DRS([x],[])+P(x))+Q(x))]))>] -> 'no' | 'No'



# Relative Pronoun: (substitutes for SubjNP of the relative clause)

Rpro[SEM=<\P Q x.(P(x)+Q(x))>] -> 'that'


# Adjectives:

ADJ[SEM=<\P x.(DRS([],[red(x)])+P(x))>] -> 'red'


# Common Nouns:

N[NUM=sg,SEM=<\x.DRS([],[boy(x)])>] -> 'boy'
N[NUM=pl,SEM=<\x.DRS([],[boy(x)])>] -> 'boys' 
N[NUM=sg,SEM=<\x.DRS([],[girl(x)])>] -> 'girl'
N[NUM=pl,SEM=<\x.DRS([],[girl(x)])>] -> 'girls'
N[NUM=sg,SEM=<\x.DRS([],[dog(x)])>] -> 'dog'
N[NUM=pl,SEM=<\x.DRS([],[dog(x)])>] -> 'dogs'
N[NUM=sg,SEM=<\x.DRS([],[student(x)])>] -> 'student'
N[NUM=pl,SEM=<\x.DRS([],[student(x)])>] -> 'students'
N[NUM=sg,SEM=<\x.DRS([],[garden(x)])>] -> 'garden'
N[NUM=sg,SEM=<\x.DRS([],[kitchen(x)])>] -> 'kitchen'
N[NUM=sg,SEM=<\x.DRS([],[car(x)])>] -> 'car'


# Auxiliary Verbs and Negation:

I[NUM=sg,SEM=<\X Y.(DRS([n,t],[loc_time(t),utter_time(n),eq(t,n)])+Y(X))>] -> 'does'
I[NUM=sg,SEM=<\X Y.(DRS([n,t],[loc_time(t),utter_time(n),earlier(n,t)])+Y(X))>] -> 'will'
I[NUM=sg,SEM=<\X Y.(DRS([n,t],[loc_time(t),utter_time(n),earlier(t,n)])+Y(X))>] -> 'did'

#I[NUM=sg,SEM=<\P x.DRS([t],[loc_time(t),-P(x)])>] -> 'doesnt'
Neg[SEM=<\Q P.Q(\x.DRS([],[-P(x)]))>] -> 'not'


# Bare Infinitives:

## Intransitives:

### Events: Accomplishments / Achievements / Activities 

V[SUBCAT=iv,-FIN,SEM=<\x.DRS([e,t],[die(e,x),achiev(e),include(t,e),LOCPRO(t)])>] -> 'die'
V[SUBCAT=iv,-FIN,SEM=<\x.DRS([e,t],[walk(e,x),activity(e),include(t,e),LOCPR0(t)])>] -> 'walk'
V[SUBCAT=iv,-FIN,SEM=<\x.DRS([e,t],[dance(e,x),activity(e),include(t,e),LOCPR0(t)])>] -> 'dance'

### States:

V[SUBCAT=iv,-FIN,SEM=<\x.DRS([e,t],[live(e,x),state(e),overlap(t,e),LOCPR0(t)])>] -> 'live'


## Transitives:

### Events: Accomplishments / Achievements / Activities 

V[SUBCAT=tv,-FIN,SEM=<\X x.X(\y.DRS([e,t],[kiss(e,x,y),accompl(e),include(t,e),LOCPRO(t)]))>,tns=pres] -> 'kiss'
V[SUBCAT=tv,-FIN,SEM=<\X x.X(\y.DRS([e,t],[write(e,x,y),accompl(e),include(t,e),LOCPRO(t)]))>,tns=pres] -> 'write'
V[SUBCAT=tv,-FIN,SEM=<\X x.X(\y.DRS([e,t],[bite(e,x,y),achiev(e),include(t,e),LOCPRO(t)]))>,tns=pres] -> 'bite'

### States:

V[SUBCAT=tv,-FIN,SEM=<\X x.X(\y.DRS([e,t],[own(e,x,y),state(e),overlap(t,e),LOCPRO(t)]))>,tns=pres] -> 'own'




# Tensed Forms with rich tense features:

## Intransitives:

### Events: Accomplishments / Achievements / Activities (no tens=pres)

V[SUBCAT=iv,+FIN,NUM=sg,SEM=<\X.(DRS([n,t],[loc_time(t),utter_time(n),earlier(t,n)])+X(\x.DRS([e],[walk(e,x),activity(e),include(t,e)])))>,tns=past] -> 'walked'
V[SUBCAT=iv,+FIN,NUM=sg,SEM=<\X.(DRS([n,t],[loc_time(t),utter_time(n),earlier(t,n)])+X(\x.DRS([e],[dance(e,x),activity(e),include(t,e)])))>,tns=past] -> 'danced'
V[SUBCAT=iv,+FIN,NUM=sg,SEM=<\X.(DRS([n,t],[loc_time(t),utter_time(n),earlier(t,n)])+X(\x.DRS([e],[die(e,x),achiev(e),include(t,e)])))>,tns=past] -> 'died'

### States:

V[SUBCAT=iv,+FIN,NUM=sg,SEM=<\X.(DRS([n,t],[loc_time(t),utter_time(n),earlier(t,n)])+X(\x.DRS([e],[live(e,x),state(e),overlap(t,e)])))>,tns=past] -> 'lived'
V[SUBCAT=iv,+FIN,NUM=sg,SEM=<\X.(DRS([n,t],[loc_time(t),utter_time(n),eq(t,n)])+X(\x.DRS([e],[live(e,x),state(e),include(e,t)])))>,tns=pres] -> 'lives'

## Transitives:

### Events: Accomplishments / Achievements / Activities (no tens=pres)

V[SUBCAT=tv,+FIN,NUM=sg,SEM=<\X Y.(DRS([n,t],[loc_time(t),utter_time(n),earlier(t,n)])+Y(\x.(X(\y.DRS([e],[bite(e,x,y),achiev(e),include(t,e)])))))>,tns=past] -> 'bit'
V[SUBCAT=tv,+FIN,NUM=sg,SEM=<\X Y.(DRS([n,t],[loc_time(t),utter_time(n),earlier(t,n)])+Y(\x.(X(\y.DRS([e],[write(e,x,y),accompl(e),include(t,e)])))))>,tns=past] -> 'wrote'

### States:

V[SUBCAT=tv,+FIN,NUM=sg,SEM=<\X Y.(DRS([n,t],[loc_time(t),utter_time(n),earlier(t,n)])+Y(\x.(X(\y.DRS([e],[own(e,x,y),state(e),overlap(t,e)])))))>,tns=past] -> 'owned'
V[SUBCAT=tv,+FIN,NUM=sg,SEM=<\X Y.(DRS([n,t],[loc_time(t),utter_time(n),eq(t,n)])+Y(\x.(X(\y.DRS([e],[own(e,x,y),state(e),include(e,t)])))))>,tns=pres] -> 'owns'

## Ditransitives:


## Copula:

# V[SUBCAT=tv,+FIN,NUM=sg,SEM=<\X Y.(DRS([n,t],[loc_time(t),utter_time(n),eq(n,t)])+Y(\x.(X(\y.DRS([e],[(x=y),state(e),overlap(e,t)])))))>,tns=pres] -> 'is'
