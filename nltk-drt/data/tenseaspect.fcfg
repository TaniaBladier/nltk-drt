## Natural Language Toolkit: tenseaspect.fcfg
## 
## Author: Peter Makarov <peter.makarov.russia@gmail.com> 

% start IP
#############################
# Grammar Rules:
#############################

# Verbal Rules:
###############

IP[SEM = <?ibar(?subj)>] -> NP[NUM=?n,SEM=?subj] Ibar[NUM=?n,SEM=?ibar]

Ibar[NUM=?n,SEM=<?vp>] -> VP[+FIN,SEM=?vp]

Ibar[NUM=?n,SEM=<?i(?vp)>] -> I[NUM=?n,SEM=?i] VP[-FIN,SEM=?vp]

I[NUM=?n,SEM=<?neg(?i)>] -> I[NUM=?n,SEM=?i] Neg[SEM=?neg]

VP[NUM=?n,FIN=?fin,SEM=?v] -> V[SUBCAT=iv,FIN=?fin,NUM=?n,SEM=?v]

VP[NUM=?n,FIN=?fin,SEM=<?v(?obj)>] -> V[SUBCAT=tv,FIN=?fin,NUM=?n,SEM=?v] NP[SEM=?obj]

# Old relative clause rule to be rewritten
RC[NUM=?n,SEM=<?ibar(?rpro)>] -> Rpro[SEM=?rpro] Ibar[NUM=?n,SEM=?ibar]

# Nominal Rules:
################

NP[NUM=?n,SEM=<?det(?nom)>] -> Det[NUM=?n,SEM=?det]  Nbar[NUM=?n,SEM=?nom]

Nbar[NUM=?n,SEM=<?adj(?nom)>] -> ADJ[SEM=?adj] N[NUM=?n,SEM=?nom]

Nbar[NUM=?n,SEM=<?rc(?nom)>] -> N[NUM=?n,SEM=?nom] RC[NUM=?n,SEM=?rc]

Nbar[NUM=?n,SEM=<?nom>] -> N[NUM=?n,SEM=?nom]

# Predeterminer
Det[SEM=<?not(?det)>] -> Not[SEM=?not] Det[SEM=?det]

#############################
# Lexicalisation Rules:
#############################

N[NUM=?n,SEM=<(\P x.DRS([],[P(x)]))(?lexn)>] -> LexN[NUM=?n,SEM=?lexn]

NP[NUM=?n,SEM=<(\Q P.(DRS([x],[Q(x)])+P(x)))(?lexn)>] -> LexPropN[NUM=?n,SEM=?lexn]

ADJ[SEM=<(\Q P x.(DRS([],[Q(x)])+P(x)))(?ladj)>] -> LexADJ[SEM=?ladj]


# Infinitives: Intransitive Events / States
###########################################

V[SUBCAT=iv,-FIN,SEM=<(\Q x.DRS([e,t],[Q(e,x),ACH(e),LOCPRO(t)]))(?lv)>] -> LexV[SUBCAT=iv,-FIN,TYPE=e,SUBTYPE=ach,SEM=?lv]

V[SUBCAT=iv,-FIN,SEM=<(\Q x.DRS([e,t],[Q(e,x),ACT(e),LOCPRO(t)]))(?lv)>] -> LexV[SUBCAT=iv,-FIN,TYPE=e,SUBTYPE=act,SEM=?lv]

V[SUBCAT=iv,-FIN,SEM=<(\Q x.DRS([s,t],[Q(s,x),LOCPRO(t)]))(?lv)>] -> LexV[SUBCAT=iv,-FIN,TYPE=s,SEM=?lv]


# Infinitives: Transitive Events / States
#########################################

V[SUBCAT=tv,-FIN,SEM=<(\Q X x.X(\y.DRS([e,t],[Q(e,x,y),ACC(e),LOCPRO(t)])))(?lv)>] -> LexV[SUBCAT=tv,-FIN,TYPE=e,SUBTYPE=acc,SEM=?lv]

V[SUBCAT=tv,-FIN,SEM=<(\Q X x.X(\y.DRS([e,t],[Q(e,x,y),ACH(e),LOCPRO(t)])))(?lv)>] -> LexV[SUBCAT=tv,-FIN,TYPE=e,SUBTYPE=ach,SEM=?lv]

V[SUBCAT=tv,-FIN,SEM=<(\Q X x.X(\y.DRS([s,t],[Q(s,x,y),LOCPRO(t)])))(?lv)>] -> LexV[SUBCAT=tv,-FIN,TYPE=s,SEM=?lv]


# Tensed Verb Forms: Intransitive Events / States
#################################################

V[SUBCAT=iv,+FIN,SEM=<(\Q X.(DRS([t],[PAST(t)])+X(\x.DRS([e],[Q(e,x),ACH(e)]))))(?lv)>] -> LexV[SUBCAT=iv,+FIN,TYPE=e,SUBTYPE=ach,SEM=?lv]

V[SUBCAT=iv,+FIN,NUM=sg,SEM=<(\Q X.(DRS([t],[PAST(t)])+X(\x.DRS([e],[Q(e,x),ACT(e)]))))(?lv)>] -> LexV[SUBCAT=iv,+FIN,TYPE=e,SUBTYPE=act,SEM=?lv]

V[SUBCAT=iv,+FIN,SEM=<(\Q X.(DRS([t],[PRES(t)])+X(\x.DRS([s],[Q(s,x)]))))(?lv)>] -> LexV[SUBCAT=iv,+FIN,TYPE=s,SEM=?lv,tense=pres,NUM=sg]

V[SUBCAT=iv,+FIN,SEM=<(\Q X.(DRS([t],[PAST(t)])+X(\x.DRS([s],[Q(s,x)]))))(?lv)>] -> LexV[SUBCAT=iv,+FIN,TYPE=s,SEM=?lv,tense=past]


# Tensed Verb Forms: Transitive Events / States
###############################################

V[SUBCAT=tv,+FIN,SEM=<(\Q X Y.(DRS([t],[PAST(t)])+Y(\x.(X(\y.DRS([e],[Q(e,x,y),ACC(e)]))))))(?lv)>] -> LexV[SUBCAT=tv,+FIN,TYPE=e,SUBTYPE=acc,SEM=?lv]

V[SUBCAT=tv,+FIN,SEM=<(\Q X Y.(DRS([t],[PAST(t)])+Y(\x.(X(\y.DRS([e],[Q(e,x,y),ACH(e)]))))))(?lv)>] -> LexV[SUBCAT=tv,+FIN,TYPE=e,SUBTYPE=ach,SEM=?lv]

V[SUBCAT=tv,+FIN,NUM=sg,SEM=<(\Q X Y.(DRS([t],[PRES(t)])+Y(\x.(X(\y.DRS([s],[Q(s,x,y)]))))))(?lv)>] -> LexV[SUBCAT=tv,+FIN,TYPE=s,SEM=?lv,tns=pres,NUM=sg] 

V[SUBCAT=tv,+FIN,SEM=<(\Q X Y.(DRS([t],[PAST(t)])+Y(\x.(X(\y.DRS([s],[Q(s,x,y)]))))))(?lv)>] -> LexV[SUBCAT=tv,+FIN,TYPE=s,SEM=?lv,tns=past]

#############################
# Lexicon
#############################

# Proper Names:
###############

LexPropN[NUM=sg,SEM=<Angus>] -> 'Angus'
LexPropN[NUM=sg,SEM=<John>] -> 'John'
LexPropN[NUM=sg,SEM=<Mary>] -> 'Mary'
LexPropN[NUM=sg,SEM=<Vincent>] -> 'Vincent'
LexPropN[NUM=sg,SEM=<Mia>] -> 'Mia'

# Personal Pronouns:
####################

LexPropN[NUM=sg,SEM=<PRO>] -> 'he' | 'He'
LexPropN[NUM=sg,SEM=<PRO>] -> 'she' | 'She'
LexPropN[NUM=sg,SEM=<PRO>] -> 'it' | 'it'

# Determiners:
##############

Det[NUM=sg,SEM=<\P Q.DRS([],[((DRS([x],[])+P(x)) implies Q(x))])>] -> 'every' | 'Every' 
Det[NUM=pl,SEM=<\P Q.DRS([],[((DRS([x],[])+P(x)) implies Q(x))])>] -> 'all' | 'All'
Det[SEM=<\P Q.((DRS([x],[])+P(x))+Q(x))>] -> 'some' | 'Some'
Det[NUM=sg,SEM=<\P Q.((DRS([x],[])+P(x))+Q(x))>] -> 'a' | 'A'
Det[NUM=sg,SEM=<\P Q.(DRS([], [not ((DRS([x],[])+P(x))+Q(x))]))>] -> 'no' | 'No'
# Pre-Determiner:
Not[SEM=<\ Q P Z.(DRS([],[-Q(P,Z)]))>] -> 'not' | 'Not'

# Relative Pronoun: (substitutes for SubjNP of the relative clause)
###################

Rpro[SEM=<\P Q x.(P(x)+Q(x))>] -> 'that'

# Adjectives:
#############

LexADJ[SEM=<red>] -> 'red'

# Common Nouns:
###############

LexN[NUM=sg,SEM=<boy>] -> 'boy'
LexN[NUM=pl,SEM=<boy>] -> 'boys'
LexN[NUM=sg,SEM=<girl>] -> 'girl'
LexN[NUM=pl,SEM=<girl>] -> 'girls'
LexN[NUM=sg,SEM=<dog>] -> 'dog'
LexN[NUM=pl,SEM=<dog>] -> 'dogs'
LexN[NUM=sg,SEM=<student>] -> 'student'
LexN[NUM=pl,SEM=<student>] -> 'students'
LexN[NUM=sg,SEM=<garden>] -> 'garden'
LexN[NUM=sg,SEM=<kitchen>] -> 'kitchen'
LexN[NUM=sg,SEM=<car>] -> 'car'

###############################
###############################

# Auxiliary Verbs and Negation:
###############################

I[NUM=sg,SEM=<\X Y.(DRS([t],[RRES(t)])+Y(X))>] -> 'does'
I[SEM=<\X Y.(DRS([t],[FUT(t)])+Y(X))>] -> 'will'
I[NUM=sg,SEM=<\X Y.(DRS([t],[PAST(t)])+Y(X))>] -> 'did'
Neg[SEM=<\Q P.Q(\x.DRS([],[-P(x)]))>] -> 'not'

# Infinitives:
##############

## Intransitives:
### Events: Accomplishments / Achievements / Activities 

LexV[SUBCAT=iv,-FIN,TYPE=e,SUBTYPE=ach,SEM=<die>] -> 'die'
LexV[SUBCAT=iv,-FIN,TYPE=e,SUBTYPE=act,SEM=<walk>] -> 'walk'
LexV[SUBCAT=iv,-FIN,TYPE=e,SUBTYPE=act,SEM=<dance>] -> 'dance'

### States:

LexV[SUBCAT=iv,-FIN,TYPE=s,SEM=<live>] -> 'live'

## Transitives:

### Events: Accomplishments / Achievements / Activities 

LexV[SUBCAT=tv,-FIN,TYPE=e,SUBTYPE=acc,SEM=<kiss>] -> 'kiss'
LexV[SUBCAT=tv,-FIN,TYPE=e,SUBTYPE=acc,SEM=<write>] -> 'write'
LexV[SUBCAT=tv,-FIN,TYPE=e,SUBTYPE=ach,SEM=<bite>] -> 'bite'

### States:

LexV[SUBCAT=tv,-FIN,TYPE=s,SEM=<own>] -> 'own'

# Tensed Forms:
###############

## Intransitives:
### Events: Accomplishments / Achievements / Activities (no tens=pres)

LexV[SUBCAT=iv,+FIN,TYPE=e,SUBTYPE=act,SEM=<walk>] -> 'walked'
LexV[SUBCAT=iv,+FIN,TYPE=e,SUBTYPE=act,SEM=<dance>] -> 'danced'
LexV[SUBCAT=iv,+FIN,TYPE=e,SUBTYPE=ach,SEM=<die>] -> 'died'

### States:

LexV[SUBCAT=iv,+FIN,TYPE=s,SEM=<live>,tense=pres,NUM=sg] -> 'lives'
LexV[SUBCAT=iv,+FIN,TYPE=s,SEM=<live>,tense=past] -> 'lived'

## Transitives:
### Events: Accomplishments / Achievements / Activities (no tens=pres)

LexV[SUBCAT=tv,+FIN,TYPE=e,SUBTYPE=acc,SEM=<write>] -> 'wrote'
LexV[SUBCAT=tv,+FIN,TYPE=e,SUBTYPE=ach,SEM=<bite>] -> 'bit'

### States:

LexV[SUBCAT=tv,+FIN,TYPE=s,SEM=<own>,tns=past] -> 'owned'
LexV[SUBCAT=tv,+FIN,TYPE=s,SEM=<own>,tns=pres,NUM=sg] -> 'owns'



## Ditransitives:

## Copula:

V[SUBCAT=tv,+FIN,NUM=sg,SEM=<\X Y.(DRS([t],[PRES(t)])+Y(\x.(X(\y.DRS([s],[eq(s,x,y)])))))>] -> 'is'
