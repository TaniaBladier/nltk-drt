% start S
############################
# Grammar Rules
#############################

S[SEM = <app(?subj,?vp)>] -> NP[NUM=?n,SEM=?subj] VP[NUM=?n,SEM=?vp]

NP[NUM=?n,SEM=<app(?det,?nom)> ] -> Det[NUM=?n,SEM=?det]  Nom[NUM=?n,SEM=?nom]
NP[LOC=?l,NUM=?n,SEM=?np] -> PropN[LOC=?l,NUM=?n,SEM=?np]

Nom[NUM=?n,SEM=?nom] -> N[NUM=?n,SEM=?nom]
Nom[NUM=?n,SEM=<app(?pp,?nom)>] -> N[NUM=?n,SEM=?nom] PP[SEM=?pp]

VP[NUM=?n,SEM=?v] -> IV[NUM=?n,SEM=?v]
VP[NUM=?n,SEM=<app(?v,?obj)>] -> TV[NUM=?n,SEM=?v] NP[SEM=?obj]

#############################
# Lexical Rules
#############################
PropN[NUM=sg,SEM=<\P.(DRS([x],[Angus(x)])+P(x))>] -> 'Angus'
PropN[NUM=sg,SEM=<\P.(DRS([x],[Mary(x)])+P(x))>] -> 'Mary'

PropN[NUM=sg,SEM=<\P.(DRS([x],[PRO(x)])+P(x))>] -> 'he' | 'He'
PropN[NUM=sg,SEM=<\P.(DRS([x],[PRO(x)])+P(x))>] -> 'she' | 'She'
PropN[NUM=sg,SEM=<\P.(DRS([x],[PRO(x)])+P(x))>] -> 'it' | 'It'

Det[NUM=sg,SEM=<\P Q.DRS([],[((DRS([x],[])+P(x)) implies Q(x))])>] -> 'every' | 'Every' 
Det[NUM=pl,SEM=<\P Q.DRS([],[((DRS([x],[])+P(x)) implies Q(x))])>] -> 'all' | 'All'
Det[SEM=<\P Q.((DRS([x],[])+P(x))+Q(x))>] -> 'some' | 'Some'
Det[NUM=sg,SEM=<\P Q.((DRS([x],[])+P(x))+Q(x))>] -> 'a' | 'A'
Det[NUM=sg,SEM=<\P Q.(DRS([],[not((DRS([x],[])+P(x))+Q(x))]))>] -> 'no' 


# This does not work: see presupp_demo.py, The boy loves the girl. --mk
# I never call replace() explicitly, though. Do I need to do that? --mk
Det[NUM=sg,SEM=<\P Q.((DRS([x],[PRESUPP(x,z)])+P(z))+Q(x))>] -> 'the' | 'The'


N[NUM=sg,SEM=<\x.DRS([],[boy(x)])>] -> 'boy' 
N[NUM=sg,SEM=<\x.DRS([],[girl(x)])>] -> 'girl'


IV[NUM=sg,SEM=<\x.DRS([],[walk(x)])>,tns=pres] -> 'walks'

TV[NUM=sg,SEM=<\X x.X(\y.DRS([],[marry(x,y)]))>,tns=pres] -> 'marries'